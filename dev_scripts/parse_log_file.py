# parse_log_file.py
#
# A standalone script to debug the Blender render time parsing logic.
#
# This script takes a single command-line argument: the path to a log file
# generated by the Sethlans worker agent. It reads the file and attempts to
# parse the render time using the same logic as the agent.
#
# USAGE:
# python parse_log_file.py /path/to/your/debug_logs/job_1_..._stdout.log
#

import re
import argparse
import sys
from pathlib import Path

def parse_render_time_from_log(log_content):
    """
    Parses Blender's stdout log content to find the total render time by
    finding the unique final summary line containing "(Saving:)".
    """
    # CORRECTED REGEX: Makes the HH: component optional to handle times < 1 hour.
    # Group 1: Hours (Optional)
    # Group 2: Minutes
    # Group 3: Seconds
    time_line_regex = re.compile(r"Time: (?:(\d{2}):)?(\d{2}):(\d{2}\.\d{2})")

    # Iterate through each line of the captured output.
    for line in log_content.splitlines():
        # The key is that the final summary line is the ONLY one
        # that contains the "(Saving:" substring.
        if "(Saving:" in line:
            print(f"\n[INFO] Found potential summary line: '{line.strip()}'")
            match = time_line_regex.search(line)
            if match:
                try:
                    # CORRECTED LOGIC: Handle the optional hour group
                    hours_str = match.group(1)
                    minutes_str = match.group(2)
                    seconds_str = match.group(3)

                    hours = int(hours_str) if hours_str else 0
                    minutes = int(minutes_str)
                    seconds = float(seconds_str)

                    total_seconds = int((hours * 3600) + (minutes * 60) + seconds)
                    print(f"[SUCCESS] Parsed render time: {total_seconds} seconds.")
                    return total_seconds
                except (IndexError, ValueError) as e:
                    print(f"[ERROR] Found summary line but failed to parse time from it: {e}")
                    return None

    # If the loop finishes without finding the line.
    print("\n[FAILURE] Could not find the final 'Time: ... (Saving: ...)' summary line in the log content.")
    return None

def main():
    """Main function to run the log parser."""
    parser = argparse.ArgumentParser(
        description="Parse a Blender render log to extract the final render time."
    )
    parser.add_argument(
        "logfile",
        type=Path,
        help="Path to the stdout log file to parse."
    )
    args = parser.parse_args()

    log_file_path = args.logfile

    if not log_file_path.is_file():
        print(f"Error: File not found at '{log_file_path}'", file=sys.stderr)
        sys.exit(1)

    print(f"--- Analyzing Log File: {log_file_path} ---")
    try:
        content = log_file_path.read_text(encoding='utf-8', errors='surrogateescape')
        parse_render_time_from_log(content)
    except Exception as e:
        print(f"An error occurred while reading or processing the file: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
